<launch>
  <param name="use_sim_time" type="bool" value="true" />
  <node name="clock_node" pkg="ppgeas" type="clock_node" respawn="true" />

  <!-- specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />
  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="true" />

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find rosi_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="pipeline" value="$(arg pipeline)"/>
  </include>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <!-- <param name="use_gui" value="$(arg use_gui)"/> -->
    <rosparam param="source_list">[move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- FAKE CONTROLLER OUTPUT -->
  <node name="fake_controller_output_node" pkg="ppgeas" type="fake_controller_output_node" respawn="true"/>

  <!-- running the conveyor belt detection node -->
  <node name="belt_detec" pkg="ppgeas" type="conveyorbelt_detection.py" respawn="true"/>

  <!-- running the state machine node -->
	<node name="arm_controller_node" pkg="ppgeas" type="arm_controller.py" respawn="true"/>

  <!-- Publish static transforms -->
  <node name="map_odom" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 1 map odom" />

  <!-- node name="bl_imu" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 1 base_link imu" / -->
  <node name="bl_velodyne_straight" pkg="tf2_ros" type="static_transform_publisher" args="0.242 0.002 0.1655 0 0 0 1 base_link velodyne_new" />

  <!-- node name="bl_kinect" pkg="tf2_ros" type="static_transform_publisher" args="0.33 0.06 0.09 0 -0.0871557 0 0.9961947 base_link camera_link" / -->
  <node name="bl_kinect" pkg="tf2_ros" type="static_transform_publisher" args="0.33 0.06 0.009 0 0 0 1 base_link camera_link" />

  <!-- OBS: kinect position and orientation tuned empirically -->
  <!-- Load reasonable defaults for the relative pose between cameras -->
    <include file="$(find rgbd_launch)/launch/kinect_frames.launch">
     <arg name="camera" value="camera" />
  </include>

  <arg name="map_file" default="$(find ppgeas)/config/mymap.yaml" />
  <!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

  <!-- Demo.launch attached -->

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find rosi_moveit_config)/default_warehouse_mongo_db" />
  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find rosi_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find rosi_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

  <!-- running the rosi arms controller node -->
  <node name="control_arm_speed" pkg="ppgeas" type="control_arm_speed.py" respawn="true"/>
  <!-- running the kinect angle controller node -->
  <node name="kinect_angle_controller" pkg="ppgeas" type="set_kinect_angle_node.py" respawn="true"/>
  <!-- running the rosi base controller node -->
  <node name="base_controller_node" pkg="ppgeas" type="base_controller.py" respawn="true"/>
  <!-- running the state machine node -->
  <node name="state_machine" pkg="ppgeas" type="machine_state" respawn="false"/>
  <!-- ODOMETRY NODE-->
  <node name="odometry_node" pkg="ppgeas" type="odometry_node" respawn="true"/>
  
</launch>
